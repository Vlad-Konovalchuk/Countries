{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/BarChat/index.js","components/BarChat/BarChat.js","components/Main/index.js","components/Main/Main.js","components/Countries/index.js","components/Countries/Countries.js","components/Country/index.js","components/Country/Country.js","App.js","Car.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","_ref","logo","react_default","a","createElement","className","Link","to","BarChat","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","loading","id","Component","Main","components_BarChat","Countries","cities","setState","axios","get","response","console","log","_this$state","map","item","key","numericCode","concat","name","area","population","Country","city","match","props","params","src","flag","alt","capital","topLevelDomain","dom","class","region","subregion","languages","lang","currencies","cur","symbol","App","Radium","style","margin","background",":hover","border","type","components_Header","Switch","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8e86f487.chunk.js","sourcesContent":["import Header from './Header';\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport './Header.scss'\r\n\r\nconst Header = ({logo})=> {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__logo\">\r\n      </div>\r\n      <nav className=\"header__navigation\">\r\n        <ul className=\"header__list\">\r\n          <li className=\"header__item\">\r\n            <Link to='/'>Home</Link>\r\n          </li>\r\n          <li className=\"header__item\">\r\n          <Link to='/countries'>Countries</Link>\r\n          </li>\r\n          <li className=\"header__item\">Films</li>\r\n          <li className=\"header__item\">Games</li>\r\n          <li className=\"header__item\">Contacts</li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import BarChat from './BarChat';\r\n\r\nexport default BarChat;","import React, {\r\n  Component\r\n} from 'react';\r\nimport axios from 'axios';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\n// TODO:Create chat bar with population like data for diagram\r\n\r\nclass BarChat extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      data: [],\r\n      loading: false\r\n    }\r\n    // this.drawChart = this.drawChart.bind(this);\r\n  }\r\n\r\n  // async componentWillMount() {\r\n  //   this.setState({loading:!this.state.loading})\r\n  //   const response = await axios.get('https://restcountries.eu/rest/v2/all')\r\n  //   this.setState({\r\n  //     cities:response.data\r\n  //   })\r\n  //   this.setState({loading:!this.state.loading})\r\n  //   console.log(this.state)\r\n  //   }\r\n\r\n  // componentDidMount() {\r\n  //   this.drawChart();\r\n  // }\r\n\r\n  // drawChart() {\r\n  //   const data =this.state.cities.map(item=>item.population).slice();\r\n  //   const svg = d3\r\n  //   .select(\"body\")\r\n  //   .append(\"svg\")\r\n  //   .attr(\"width\")\r\n  //   .attr(\"height\")\r\n  //   .style(\"margin-left\", 100);\r\n                  \r\n  //   svg.selectAll(\"rect\")\r\n  //     .data(data)\r\n  //     .enter()\r\n  //     .append(\"rect\")\r\n  //     .attr(\"x\", (d, i) => i * 70)\r\n  //     .attr(\"y\", (d, h) => h - 10 * d)\r\n  //     .attr(\"width\", 65)\r\n  //     .attr(\"height\", (d, i) => d * 10)\r\n  //     .attr(\"fill\", \"green\")\r\n  // }\r\n        \r\n  render(){\r\n    return <div id={\"#12\"}></div>\r\n  }\r\n}\r\n\r\nexport default BarChat;","import Main from './Main';\r\n\r\nexport default Main;","import React from 'react';\r\nimport './Main.scss';\r\nimport BarChat from '../BarChat';\r\n\r\n\r\n\r\nconst Main = ()=>{\r\n  return (\r\n    <main className=\"home-block\">\r\n      <h2 className=\"home__title\">Countries List</h2>\r\n      <p  className=\"home__intro\">\r\n      Here you can see information about any country in World !\r\n      </p>\r\n      <ul>\r\n        <h3>I`ll add more infomation and features soon</h3>\r\n        <BarChat/>\r\n      </ul>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main;","import Countries from './Countries';\r\n\r\nexport default Countries;","import React, {\r\n  Component\r\n} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport './Countries.scss'\r\n\r\nexport default class Countries extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      cities: [],\r\n      loading: false\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    this.setState({loading:!this.state.loading})\r\n    const response = await axios.get('https://restcountries.eu/rest/v2/all')\r\n    this.setState({\r\n      cities:response.data\r\n    })\r\n    this.setState({loading:!this.state.loading})\r\n    console.log(this.state)\r\n    }\r\n  \r\n  render (){\r\n      const {cities,loading } = this.state;\r\n      if(loading){\r\n        return (\r\n          <main className='main_content'>\r\n              <h2>Here will be list of a cities!</h2>\r\n          </main>\r\n        )\r\n      }\r\n      return(\r\n        <main className='main_content'>\r\n           <table className=\"country-table\">\r\n             <thead className=\"country-table__head\" >\r\n               <tr>\r\n                  <th>Countr</th>\r\n                  <th>Area</th>\r\n                  <th>Population</th>\r\n               </tr>\r\n             </thead>\r\n             <tbody className=\"country-table__list\">\r\n               {cities.map(item=>\r\n               <tr key={item.numericCode}>\r\n               <td><Link to={`/countries/${item.name}`}>{item.name}</Link></td>\r\n                  <td>{item.area}</td>\r\n                  <td>{item.population}</td>\r\n               </tr>\r\n               )}\r\n             </tbody>\r\n           </table>\r\n        </main>\r\n      )\r\n    }\r\n  }","import Country from './Country';\r\n\r\nexport default Country;","import React, {\r\n  Component\r\n} from 'react';\r\nimport axios from 'axios';\r\nimport './Country.scss'\r\n\r\nexport default class Country extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      city: [],\r\n      loading: false\r\n    }\r\n  }\r\n\r\n  async componentWillMount() {\r\n    const { match } = this.props\r\n    this.setState({loading:!this.state.loading})\r\n    const response = await axios.get(`https://restcountries.eu/rest/v2/name/${match.params.id}`)\r\n    this.setState({\r\n      city:response.data[0]\r\n    })\r\n    this.setState({loading:!this.state.loading})\r\n    console.log(this.state)\r\n    }\r\n  \r\n  render (){\r\n      const {loading,city } = this.state;\r\n      console.log(city)\r\n      if(loading){\r\n        return (\r\n          <main className='main_content'>\r\n              <h2>Here will be a city info!</h2>\r\n          </main>\r\n        )\r\n      }\r\n      return(\r\n        <sectio className=\"country-item\">\r\n        <div className=\"country-header\">\r\n        <h1>{city.name}</h1>\r\n          <div className=\"country-flag\">\r\n            <img src={city.flag} alt={city.name}/>\r\n          </div>\r\n        </div>\r\n        <ul className=\"country-details\">\r\n          <li>\r\n            <strong>Capital: </strong>{city.capital}\r\n          </li>\r\n          <li>\r\n            <strong>Population: </strong> {city.population}\r\n          </li>\r\n          <li>\r\n            <strong>Top level domain: </strong> \r\n            <ul>\r\n            {city.topLevelDomain.map(dom=><li>{city.dom}</li>)}\r\n            </ul>\r\n          </li>\r\n          <li class=\"country-geo\">\r\n            <strong>Geographic location:</strong>\r\n              <ul className=\"country__sublist\">\r\n                <li>\r\n                <strong>Region: </strong> \r\n                {city.region}\r\n                </li>\r\n                <li>\r\n                  <strong>Sub-regio: </strong>{city.subregion}\r\n                </li>\r\n              </ul>\r\n          </li>\r\n          <li>\r\n            <strong>Languages: </strong>\r\n            <ul>\r\n              {city.languages.map(lang=><li>{lang.name}</li>)}\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            <strong>National currencies: </strong>\r\n            <ul>\r\n              {city.currencies.map(cur=><li>{cur.name} {cur.symbol}</li>)}\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n        </sectio>\r\n      )\r\n    }\r\n  }","import React, { Component } from 'react';\nimport { Route,Switch } from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Countries from './components/Countries';\nimport Country from './components/Country';\nimport Car from './Car';\n\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header logo={logo}/>\n        <main className='container'>\n        <Switch>\n          <Route path='/countries/:id' component={Country}/>\n          <Route path='/countries' component={Countries}/>\n          <Route path='/' component={Main}/>\n        </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport Radium from 'radium';\r\nconst Car = ()=> {\r\n  const style = {\r\n    margin:'2rem',\r\n    background:'#eee',\r\n    \":hover\": {\r\n      border:'1px solid #fff'\r\n    }\r\n  }\r\n    return (\r\n      <div style={style}>\r\n        <h3>Car Name</h3>\r\n        <p>Year: <strong>1987</strong></p>\r\n        <input type=\"text\"/>\r\n        <button>Buy this car</button>\r\n      </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Radium(Car);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  \n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}